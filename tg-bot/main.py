import asyncio
import base64
import io
import logging
from typing import Dict, Any

import aiohttp
from PIL import Image
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from configuration.settings import settings

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = settings.prediction_service_url
TELEGRAM_TOKEN = settings.tg_bot_token
TIMEOUT = 30
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


class APIError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ API"""


async def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL.replace("/predict", "/health"), timeout=5) as response:
                if response.status != 200:
                    raise ConnectionError(f"API health check failed: {response.status}")
                logger.info("API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        raise


def validate_image(image_bytes: bytes) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        with Image.open(io.BytesIO(image_bytes)) as img:
            img.verify()
        return True
    except Exception as e:
        logger.error(f"Invalid image: {e}")
        return False


async def send_to_api(image_bytes: bytes) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ API"""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º {len(image_bytes)} –±–∞–π—Ç –≤ API")

        async with aiohttp.ClientSession() as session:
            form_data = aiohttp.FormData()
            form_data.add_field(
                name="file",
                value=io.BytesIO(image_bytes),
                filename="xray.jpg",
                content_type="image/jpeg"
            )

            async with session.post(API_URL, data=form_data, timeout=TIMEOUT) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise APIError(f"API error: {response.status} - {error_text}")

                return await response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        raise APIError(str(e))


async def send_results(message: Message, result: Dict[str, Any], image_bytes: bytes):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        prediction = result["prediction"]
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: recommendation —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ result ---
        recommendation = result["recommendation"]
        # ---------------------------------------------------------------------

        pneumonia_prob = prediction["pneumonia_probability"] * 100
        normal_prob = prediction["normal_probability"] * 100
        diagnosis = "–ü–ù–ï–í–ú–û–ù–ò–Ø" if prediction["is_pneumonia"] else "–ù–û–†–ú–ê"

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_text = (
            f"ü©∫ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê</b>\n"
            f"<b>{diagnosis}</b>\n\n"
            f"üìä <b>–í–ï–†–û–Ø–¢–ù–û–°–¢–ò:</b>\n"
            f"‚ñ™Ô∏è –ü–Ω–µ–≤–º–æ–Ω–∏—è: <code>{pneumonia_prob:.1f}%</code>\n"
            f"‚ñ™Ô∏è –ù–æ—Ä–º–∞: <code>{normal_prob:.1f}%</code>\n\n"
            f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n"
            f"{recommendation['action']}\n"  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é recommendation
            f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: <b>{recommendation['urgency']}</b>\n\n" # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é recommendation
            f"<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å (CNN + ViT)</i>\n"
            f"<i>–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –Ω–µ –∑–∞–º–µ–Ω—è—é—â–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</i>"
        )

        # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(io.BytesIO(image_bytes)) as img:
            img.thumbnail((512, 512))
            buffered = io.BytesIO()
            img.save(buffered, format="JPEG", quality=85)
            await message.answer_photo(
                photo=types.BufferedInputFile(
                    file=buffered.getvalue(),
                    filename="xray_thumbnail.jpg"
                ),
                caption="üñº <b>–í–∞—à —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫</b>",
                parse_mode=ParseMode.HTML
            )

        # 2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if "plot_image" in result and result["plot_image"]:
            try:
                plot_bytes = base64.b64decode(result["plot_image"])
                await message.answer_photo(
                    photo=types.BufferedInputFile(
                        file=plot_bytes,
                        filename="probabilities_plot.png"
                    ),
                    caption="üìà <b>–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</b>",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        # 3. –ù–∞–∫–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            text=result_text,
            parse_mode=ParseMode.HTML,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="‚ÑπÔ∏è –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                        callback_data="help_interpreting"
                    )]
                ]
            )
        )

    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ API: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}. –ü–æ–ª—É—á–µ–Ω–æ: {result}") # Added more context to error
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
@dp.callback_query(F.data == "help_interpreting")
async def interpreting_help(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üìö <b>–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
        "‚Ä¢ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏ 0-20%</b> - –Ω–æ—Ä–º–∞\n"
        "‚Ä¢ <b>20-40%</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        "‚Ä¢ <b>40-70%</b> - —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ <b>70-100%</b> - –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏, —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É\n\n"
        "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—á–µ—Ç–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ CNN –∏ ViT –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.",
        parse_mode=ParseMode.HTML
    )


async def process_image(message: Message, image_bytes: bytes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if len(image_bytes) > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10 –ú–ë)")
            return

        if not validate_image(image_bytes):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–Ω–∏–º–æ–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π –º–æ–¥–µ–ª—å—é...")

        result = await send_to_api(image_bytes)
        await send_results(message, result, image_bytes)

    except APIError as e:
        logger.error(f"API Error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if 'processing_msg' in locals():
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –Ω–∞–ª–∏—á–∏–µ –ø–Ω–µ–≤–º–æ–Ω–∏–∏.\n"
            "–û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å (CNN + ViT)."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await message.answer(
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–æ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç (–∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª)\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 15-30 —Å–µ–∫—É–Ω–¥\n\n"
            "üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–Ω–∏–º–∫–∞–º:\n"
            "- –§–æ—Ä–º–∞—Ç: JPG, PNG\n"
            "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n"
            "- –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –±–ª–∏–∫–æ–≤\n\n"
            "‚ö†Ô∏è –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—É—é –º–æ–¥–µ–ª—å –ò–ò –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")


@dp.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"""
    processing_msg = None
    try:
        processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–Ω–∏–º–æ–∫...")
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download(file)
        image_bytes = file_data.read() if hasattr(file_data, 'read') else file_data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(image_bytes)} –±–∞–π—Ç")
        await process_image(message, image_bytes)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
    finally:
        if processing_msg:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass


@dp.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    processing_msg = None
    try:
        if not message.document.mime_type.startswith('image/'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG –∏–ª–∏ PNG")
            return

        processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")
        file = await bot.get_file(message.document.file_id)
        file_data = await bot.download(file)
        image_bytes = file_data.read() if hasattr(file_data, 'read') else file_data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {len(image_bytes)} –±–∞–π—Ç")
        await process_image(message, image_bytes)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
    finally:
        if processing_msg:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.close()


if __name__ == '__main__':
    asyncio.run(main())