import io

import matplotlib.pyplot as plt
import requests
import streamlit as st
from PIL import Image

from configuration.settings import settings

RESULT_POLLING_MAX_RETRIES = 30
CLASS_NAMES = ['–ù–æ—Ä–º–∞', '–ü–Ω–µ–≤–º–æ–Ω–∏—è']

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .stApp {
        background-color: #f5f5f5;
    }
    .title {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
    }
    .result-box {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .diagnosis {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .pneumonia {
        color: #e74c3c;
    }
    .normal {
        color: #2ecc71;
    }
    .probability {
        font-size: 20px;
        margin-bottom: 15px;
    }
    .model-result {
        padding: 10px;
        border-left: 4px solid #3498db;
        margin-bottom: 8px;
        background-color: #f8f9fa;
    }
    .recommendation {
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }
    .warning {
        background-color: #fde8e8;
        border-left: 4px solid #e74c3c;
    }
    .success {
        background-color: #e8f8f0;
        border-left: 4px solid #2ecc71;
    }
    .stSpinner > div > div {
        color: #3498db !important;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<h1 class='title'>–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –Ω–∞ –ø–Ω–µ–≤–º–æ–Ω–∏—é</h1>", unsafe_allow_html=True)
st.markdown("""
    <div style="text-align: center; margin-bottom: 30px;">
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≥–∏–±—Ä–∏–¥–Ω—É—é –º–æ–¥–µ–ª—å.
    </div>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
def predict_image(image_bytes):
    try:
        files = {"file": ("image.jpg", image_bytes, "image/jpeg")}
        response = requests.post(settings.get_predict_endpoint(), files=files)

        if response.status_code == 202:
            task_id = response.json().get('task_id')
            return get_prediction_results(task_id)
        else:
            error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–Ω–∏–º–∫–∞: {error_detail}")
            return None
    except requests.exceptions.ConnectionError:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API-—Å–µ—Ä–≤–∏—Å—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None


def get_prediction_results(task_id):
    import time
    for _ in range(RESULT_POLLING_MAX_RETRIES):
        poll_response = requests.get(settings.get_prediction_result_endpoint(task_id))
        if poll_response.status_code == 200:
            return poll_response.json().get('result')
        elif poll_response.status_code == 202:
            time.sleep(1)
        else:
            error_detail = poll_response.json().get('error', '–°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏')
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {error_detail}")
            return None
    st.error("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Hybrid)
def create_probability_plot(pneumonia_prob, normal_prob):
    # Reduced figsize for a smaller plot
    fig, ax = plt.subplots(figsize=(4, 2)) # Changed from (8, 4) to (6, 3)

    labels = ['–ù–æ—Ä–º–∞', '–ü–Ω–µ–≤–º–æ–Ω–∏—è']
    probabilities = [normal_prob, pneumonia_prob]
    colors = ['green', 'red']

    ax.bar(labels, probabilities, color=colors)
    ax.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –º–æ–¥–µ–ª—å—é')
    ax.set_ylim(0, 1)
    ax.grid(True, axis='y', alpha=0.3)

    return fig


# --- File Uploader for Multiple Files ---
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ (JPG/PNG)",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True, # Key change here!
    help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
)

if uploaded_files: # Check if any files are uploaded
    # Button to trigger analysis for all uploaded files
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–Ω–∏–º–∫–∏", type="primary"):
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        for i, uploaded_file in enumerate(uploaded_files):
            # Display uploaded image and prepare for analysis
            image = Image.open(uploaded_file)
            img_bytes = io.BytesIO()
            image.save(img_bytes, format="JPEG")
            img_bytes = img_bytes.getvalue()

            # Use an expander for each image's results
            with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–Ω–∏–º–∫–∞: **{uploaded_file.name}**"):
                st.image(image, caption=f"–í–∞—à —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫: {uploaded_file.name}", width=300)

                with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–Ω–∏–º–æ–∫ {uploaded_file.name}..."):
                    result = predict_image(img_bytes)

                    if result:
                        prediction = result.get("prediction", {})
                        recommendation = result.get("recommendation", {})
                        #plot_image_base64 = result.get("plot_image")

                        diagnosis_class_name = prediction.get("class", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        pneumonia_probability = prediction.get("pneumonia_probability", 0.0)
                        normal_probability = prediction.get("normal_probability", 0.0)
                        is_pneumonia = prediction.get("is_pneumonia", False)

                        action_text = recommendation.get("action", "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                        urgency_text = recommendation.get("urgency", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                        st.markdown("<div class='result-box'>", unsafe_allow_html=True)

                        diagnosis_css_class = "pneumonia" if is_pneumonia else "normal"
                        st.markdown(f"""
                            <div class='diagnosis {diagnosis_css_class}'>
                                –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: {diagnosis_class_name.upper()}
                            </div>
                            <div class='probability'>
                                –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏: <strong>{pneumonia_probability * 100:.1f}%</strong><br>
                                –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–æ—Ä–º—ã: <strong>{normal_probability * 100:.1f}%</strong>
                            </div>
                        """, unsafe_allow_html=True)

                        rec_css_class = "warning" if is_pneumonia else "success"
                        st.markdown(f"""
                            <div class='recommendation {rec_css_class}'>
                                <h4>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò</h4>
                                <p>{action_text}</p>
                                <p>–°—Ä–æ—á–Ω–æ—Å—Ç—å: <b>{urgency_text}</b></p>
                            </div>
                        """, unsafe_allow_html=True)

                        st.markdown("</div>", unsafe_allow_html=True)

                        #if plot_image_base64:
                        #    try:
                        #        plot_bytes = base64.b64decode(plot_image_base64)
                        #        st.image(plot_bytes, caption="–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏", use_container_width=True)
                        #    except Exception as e:
                        #        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {uploaded_file.name}: {e}")
                        #else:
                        #    fig = create_probability_plot(pneumonia_probability, normal_probability)
                        #    if fig:
                        #        st.pyplot(fig)
                        #        plt.close(fig) # Close the figure to free up memory

                    st.markdown("---") # Separator for clarity between image results

# --- Global Interpretation and Sidebar ---
with st.expander("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
    st.markdown("""
        - **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏ 0-20%** - –Ω–æ—Ä–º–∞
        - **20-40%** - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å
        - **40-70%** - —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        - **70-100%** - –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏, —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å (ResNet + EfficientNet) –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.markdown("""
### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç **–≥–∏–±—Ä–∏–¥–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏.

**–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:**
- **Hybrid** (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è CNN –∏ ViT)

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ **–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ** —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤.
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–Ω–∏–º–∫–∏".
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∏–º–∫–∞.

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.
""")

st.sidebar.markdown("""
### –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
–û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?  
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: AlinaLukmanova@gmail.com
""")