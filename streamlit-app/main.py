import io

import matplotlib.pyplot as plt
import requests
import streamlit as st
from PIL import Image

from configuration.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FASTAPI_URL = settings.prediction_service_url
CLASS_NAMES = ['–ù–æ—Ä–º–∞', '–ü–Ω–µ–≤–º–æ–Ω–∏—è']

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
<style>
    .stApp {
        background-color: #f5f5f5;
    }
    .title {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
    }
    .result-box {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .diagnosis {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .pneumonia {
        color: #e74c3c;
    }
    .normal {
        color: #2ecc71;
    }
    .probability {
        font-size: 20px;
        margin-bottom: 15px;
    }
    .model-result {
        padding: 10px;
        border-left: 4px solid #3498db;
        margin-bottom: 8px;
        background-color: #f8f9fa;
    }
    .recommendation {
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }
    .warning {
        background-color: #fde8e8;
        border-left: 4px solid #e74c3c;
    }
    .success {
        background-color: #e8f8f0;
        border-left: 4px solid #2ecc71;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<h1 class='title'>–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –Ω–∞ –ø–Ω–µ–≤–º–æ–Ω–∏—é</h1>", unsafe_allow_html=True)
st.markdown("""
    <div style="text-align: center; margin-bottom: 30px;">
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏.
    </div>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
def predict_image(image_bytes):
    try:
        files = {"file": ("image.jpg", image_bytes, "image/jpeg")}
        response = requests.post(FASTAPI_URL, files=files)

        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_probability_plot(models_data):
    fig, ax = plt.subplots(figsize=(10, 5))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    valid_models = {k: v for k, v in models_data.items() if 'probabilities' in v}

    if not valid_models:
        return None

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    models = [pred['name'] for pred in valid_models.values()]
    pneumonia_probs = [data['probabilities'][1] for data in valid_models.values()]
    normal_probs = [data['probabilities'][0] for data in valid_models.values()]

    # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    avg_pneumonia = sum(pneumonia_probs) / len(pneumonia_probs)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    x = range(len(models))
    width = 0.35

    ax.bar(x, normal_probs, width, label='–ù–æ—Ä–º–∞', color='#2ecc71')
    ax.bar(x, pneumonia_probs, width, bottom=normal_probs, label='–ü–Ω–µ–≤–º–æ–Ω–∏—è', color='#e74c3c')

    # –õ–∏–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    ax.axhline(y=avg_pneumonia, color='#3498db', linestyle='--',
               label=f'–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏: {avg_pneumonia:.1%}')

    ax.set_xticks(x)
    ax.set_xticklabels(models)
    ax.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏')
    ax.legend(loc='upper right')
    ax.set_ylim(0, 1)
    ax.grid(True, axis='y', alpha=0.3)

    return fig


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ (JPG/PNG)",
    type=["jpg", "jpeg", "png"],
    help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
)

if uploaded_file is not None:
    # –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.open(uploaded_file)
    st.image(image, caption="–í–∞—à —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫", width=300)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ bytes
    img_bytes = io.BytesIO()
    image.save(img_bytes, format="JPEG")
    img_bytes = img_bytes.getvalue()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–∏–º–æ–∫", type="primary"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–Ω–∏–º–æ–∫..."):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            result = predict_image(img_bytes)

            if result:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.markdown("<div class='result-box'>", unsafe_allow_html=True)

                # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                final_pred = result["final_prediction"]
                diagnosis_class = "pneumonia" if final_pred["class"] == "–ü–Ω–µ–≤–º–æ–Ω–∏—è" else "normal"

                st.markdown(f"""
                    <div class='diagnosis {diagnosis_class}'>
                        –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: {final_pred["class"].upper()}
                    </div>
                    <div class='probability'>
                        –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: <strong>{final_pred['probability'] * 100:.1f}%</strong>
                    </div>
                """, unsafe_allow_html=True)

                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º
                st.markdown("<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º:</h4>", unsafe_allow_html=True)
                for model, pred in result["models_predictions"].items():
                    st.markdown(f"""
                        <div class='model-result'>
                            <b>{pred['name']}</b>: {pred['class']} ({pred['probability'] * 100:.1f}%)
                        </div>
                    """, unsafe_allow_html=True)

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                rec_class = "warning" if final_pred["class"] == "–ü–Ω–µ–≤–º–æ–Ω–∏—è" else "success"
                rec_text = ("‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞!"
                            if final_pred["class"] == "–ü–Ω–µ–≤–º–æ–Ω–∏—è"
                            else "‚úÖ –ü–∞—Ç–æ–ª–æ–≥–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

                st.markdown(f"""
                    <div class='recommendation {rec_class}'>
                        <h4>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò</h4>
                        {rec_text}
                    </div>
                """, unsafe_allow_html=True)

                st.markdown("</div>", unsafe_allow_html=True)

                # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                fig = create_probability_plot(result["models_predictions"])
                if fig:
                    st.pyplot(fig)

                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                with st.expander("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                    st.markdown("""
                        - **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ 20%** - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–æ—Ä–º–∞
                        - **20-60%** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        - **60-90%** - –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏
                        - **–í—ã—à–µ 90%** - —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É

                        –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏. 
                        –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
                    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.markdown("""
### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏.

**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:**
- ResNet18
- EfficientNet
- VGG16
- ViT
- Hybrid

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–∏–º–æ–∫"
3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.
""")

st.sidebar.markdown("""
### –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
–û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?  
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: AlinaLukmanova@gmail.com
""")